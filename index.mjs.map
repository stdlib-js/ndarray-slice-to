{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isndarrayLike from '@stdlib/assert-is-ndarray-like';\nimport isArrayLikeObject from '@stdlib/assert-is-array-like-object';\nimport isPlainObject from '@stdlib/assert-is-plain-object';\nimport { isPrimitive as isNumber } from '@stdlib/assert-is-number';\nimport { isPrimitive as isBoolean } from '@stdlib/assert-is-boolean';\nimport isNull from '@stdlib/assert-is-null';\nimport isUndefined from '@stdlib/assert-is-undefined';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport getShape from '@stdlib/ndarray-shape';\nimport base from '@stdlib/ndarray-base-slice-to';\nimport format from '@stdlib/string-format';\n\n\n// FUNCTIONS //\n\n/**\n* Tests whether an ending index argument is invalid.\n*\n* @private\n* @param {*} index - index argument\n* @returns {boolean} boolean indicating if an argument is invalid\n*\n* @example\n* var bool = isInvalidIndex( 4 );\n* // returns false\n*\n* @example\n* var bool = isInvalidIndex( {} );\n* // returns true\n*/\nfunction isInvalidIndex( index ) {\n\treturn !(\n\t\tisNumber( index ) ||\n\t\tisNull( index ) ||\n\t\tisUndefined( index )\n\t);\n}\n\n\n// MAIN //\n\n/**\n* Returns a read-only truncated view of an input ndarray.\n*\n* @param {ndarray} x - input array\n* @param {...(null|integer|undefined)} stop - ending indices (exclusive)\n* @param {Options} [options] - options\n* @param {boolean} [options.strict] - boolean indicating whether to enforce strict bounds checking\n* @throws {TypeError} first argument must be an ndarray\n* @throws {TypeError} must provide valid ending indices\n* @throws {Error} insufficient arguments\n* @throws {Error} too many arguments\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {RangeError} number of ending indices must match the number of array dimensions\n* @throws {RangeError} index exceeds array bounds\n* @returns {ndarray} ndarray view\n*\n* @example\n* import ndarray from '@stdlib/ndarray-ctor';\n* import ndarray2array from '@stdlib/ndarray-to-array';\n*\n* var buffer = [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ];\n* var shape = [ 3, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var x = ndarray( 'generic', buffer, shape, strides, offset, 'row-major' );\n* // returns <ndarray>\n*\n* var sh = x.shape;\n* // returns [ 3, 2 ]\n*\n* var arr = ndarray2array( x );\n* // returns [ [ 1.0, 2.0 ], [ 3.0, 4.0 ], [ 5.0, 6.0 ] ]\n*\n* var y = sliceTo( x, 2, null );\n* // returns <ndarray>\n*\n* sh = y.shape;\n* // returns [ 2, 2 ]\n*\n* arr = ndarray2array( y );\n* // returns [ [ 1.0, 2.0 ], [ 3.0, 4.0 ] ]\n*/\nfunction sliceTo( x, stop ) {\n\tvar options;\n\tvar nargs;\n\tvar opts;\n\tvar args;\n\tvar sh;\n\tvar i;\n\n\topts = {\n\t\t'strict': true\n\t};\n\tnargs = arguments.length;\n\tif ( !isndarrayLike( x ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an ndarray. Value: `%s`.', x ) );\n\t}\n\tif ( isPlainObject( arguments[ nargs-1 ] ) ) {\n\t\tnargs -= 1;\n\t\toptions = arguments[ nargs ];\n\t\tif ( hasOwnProp( options, 'strict' ) ) {\n\t\t\tif ( !isBoolean( options.strict ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'strict', options.strict ) );\n\t\t\t}\n\t\t\topts.strict = options.strict;\n\t\t}\n\t\tsh = getShape( x );\n\t\tif ( nargs === 1 && sh.length > 0 ) {\n\t\t\tthrow new RangeError( format( 'invalid argument. Number of indices does not match the number of array dimensions. Array shape: (%s). Number of indices: %u.', sh.join( ',' ), 0 ) );\n\t\t}\n\t}\n\tif ( isArrayLikeObject( stop ) ) {\n\t\targs = stop;\n\t\tif ( nargs > 2 ) {\n\t\t\tthrow new Error( 'invalid invocation. Too many arguments.' );\n\t\t}\n\t} else {\n\t\targs = [];\n\t\tfor ( i = 1; i < nargs; i++ ) {\n\t\t\targs.push( arguments[ i ] );\n\t\t}\n\t}\n\tfor ( i = 0; i < args.length; i++ ) {\n\t\tif ( isInvalidIndex( args[ i ] ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Each index argument must be either an integer, null, or undefined. Value: `%s`.', String( args[ i ] ) ) );\n\t\t}\n\t}\n\treturn base( x, args, opts.strict, false );\n}\n\n\n// EXPORTS //\n\nexport default sliceTo;\n"],"names":["isInvalidIndex","index","isNumber","isNull","isUndefined","sliceTo","x","stop","options","nargs","opts","args","sh","i","strict","arguments","length","isndarrayLike","TypeError","format","isPlainObject","hasOwnProp","isBoolean","getShape","RangeError","join","isArrayLikeObject","Error","push","String","base"],"mappings":";;siCAoDA,SAASA,EAAgBC,GACxB,QACCC,EAAUD,IACVE,EAAQF,IACRG,EAAaH,GAEf,CAiDA,SAASI,EAASC,EAAGC,GACpB,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EAMJ,GAJAH,EAAO,CACNI,QAAU,GAEXL,EAAQM,UAAUC,QACZC,EAAeX,GACpB,MAAM,IAAIY,UAAWC,EAAQ,oEAAqEb,IAEnG,GAAKc,EAAeL,UAAWN,EAAM,IAAQ,CAG5C,GAAKY,EADLb,EAAUO,UADVN,GAAS,GAEiB,UAAa,CACtC,IAAMa,EAAWd,EAAQM,QACxB,MAAM,IAAII,UAAWC,EAAQ,+DAAgE,SAAUX,EAAQM,SAEhHJ,EAAKI,OAASN,EAAQM,MACtB,CAED,GADAF,EAAKW,EAAUjB,GACA,IAAVG,GAAeG,EAAGI,OAAS,EAC/B,MAAM,IAAIQ,WAAYL,EAAQ,+HAAgIP,EAAGa,KAAM,KAAO,GAE/K,CACD,GAAKC,EAAmBnB,IAEvB,GADAI,EAAOJ,EACFE,EAAQ,EACZ,MAAM,IAAIkB,MAAO,gDAIlB,IADAhB,EAAO,GACDE,EAAI,EAAGA,EAAIJ,EAAOI,IACvBF,EAAKiB,KAAMb,UAAWF,IAGxB,IAAMA,EAAI,EAAGA,EAAIF,EAAKK,OAAQH,IAC7B,GAAKb,EAAgBW,EAAME,IAC1B,MAAM,IAAIK,UAAWC,EAAQ,oGAAqGU,OAAQlB,EAAME,MAGlJ,OAAOiB,EAAMxB,EAAGK,EAAMD,EAAKI,QAAQ,EACpC"}