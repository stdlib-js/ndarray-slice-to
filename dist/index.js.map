{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isndarrayLike = require( '@stdlib/assert-is-ndarray-like' );\nvar isArrayLikeObject = require( '@stdlib/assert-is-array-like-object' );\nvar isPlainObject = require( '@stdlib/assert-is-plain-object' );\nvar isNumber = require( '@stdlib/assert-is-number' ).isPrimitive;\nvar isBoolean = require( '@stdlib/assert-is-boolean' ).isPrimitive;\nvar isNull = require( '@stdlib/assert-is-null' );\nvar isUndefined = require( '@stdlib/assert-is-undefined' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar getShape = require( '@stdlib/ndarray-shape' );\nvar base = require( '@stdlib/ndarray-base-slice-to' );\nvar format = require( '@stdlib/string-format' );\n\n\n// FUNCTIONS //\n\n/**\n* Tests whether an ending index argument is invalid.\n*\n* @private\n* @param {*} index - index argument\n* @returns {boolean} boolean indicating if an argument is invalid\n*\n* @example\n* var bool = isInvalidIndex( 4 );\n* // returns false\n*\n* @example\n* var bool = isInvalidIndex( {} );\n* // returns true\n*/\nfunction isInvalidIndex( index ) {\n\treturn !(\n\t\tisNumber( index ) ||\n\t\tisNull( index ) ||\n\t\tisUndefined( index )\n\t);\n}\n\n\n// MAIN //\n\n/**\n* Returns a read-only truncated view of an input ndarray.\n*\n* @param {ndarray} x - input array\n* @param {...(null|integer|undefined)} stop - ending indices (exclusive)\n* @param {Options} [options] - options\n* @param {boolean} [options.strict] - boolean indicating whether to enforce strict bounds checking\n* @throws {TypeError} first argument must be an ndarray\n* @throws {TypeError} must provide valid ending indices\n* @throws {Error} insufficient arguments\n* @throws {Error} too many arguments\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {RangeError} number of ending indices must match the number of array dimensions\n* @throws {RangeError} index exceeds array bounds\n* @returns {ndarray} ndarray view\n*\n* @example\n* var ndarray = require( '@stdlib/ndarray-ctor' );\n* var ndarray2array = require( '@stdlib/ndarray-to-array' );\n*\n* var buffer = [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ];\n* var shape = [ 3, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var x = ndarray( 'generic', buffer, shape, strides, offset, 'row-major' );\n* // returns <ndarray>\n*\n* var sh = x.shape;\n* // returns [ 3, 2 ]\n*\n* var arr = ndarray2array( x );\n* // returns [ [ 1.0, 2.0 ], [ 3.0, 4.0 ], [ 5.0, 6.0 ] ]\n*\n* var y = sliceTo( x, 2, null );\n* // returns <ndarray>\n*\n* sh = y.shape;\n* // returns [ 2, 2 ]\n*\n* arr = ndarray2array( y );\n* // returns [ [ 1.0, 2.0 ], [ 3.0, 4.0 ] ]\n*/\nfunction sliceTo( x, stop ) {\n\tvar options;\n\tvar nargs;\n\tvar opts;\n\tvar args;\n\tvar sh;\n\tvar i;\n\n\topts = {\n\t\t'strict': true\n\t};\n\tnargs = arguments.length;\n\tif ( !isndarrayLike( x ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an ndarray. Value: `%s`.', x ) );\n\t}\n\tif ( isPlainObject( arguments[ nargs-1 ] ) ) {\n\t\tnargs -= 1;\n\t\toptions = arguments[ nargs ];\n\t\tif ( hasOwnProp( options, 'strict' ) ) {\n\t\t\tif ( !isBoolean( options.strict ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'strict', options.strict ) );\n\t\t\t}\n\t\t\topts.strict = options.strict;\n\t\t}\n\t\tsh = getShape( x );\n\t\tif ( nargs === 1 && sh.length > 0 ) {\n\t\t\tthrow new RangeError( format( 'invalid argument. Number of indices does not match the number of array dimensions. Array shape: (%s). Number of indices: %u.', sh.join( ',' ), 0 ) );\n\t\t}\n\t}\n\tif ( isArrayLikeObject( stop ) ) {\n\t\targs = stop;\n\t\tif ( nargs > 2 ) {\n\t\t\tthrow new Error( 'invalid invocation. Too many arguments.' );\n\t\t}\n\t} else {\n\t\targs = [];\n\t\tfor ( i = 1; i < nargs; i++ ) {\n\t\t\targs.push( arguments[ i ] );\n\t\t}\n\t}\n\tfor ( i = 0; i < args.length; i++ ) {\n\t\tif ( isInvalidIndex( args[ i ] ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Each index argument must be either an integer, null, or undefined. Value: `%s`.', String( args[ i ] ) ) );\n\t\t}\n\t}\n\treturn base( x, args, opts.strict, false );\n}\n\n\n// EXPORTS //\n\nmodule.exports = sliceTo;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return a read-only truncated view of an input ndarray.\n*\n* @module @stdlib/ndarray-slice-to\n*\n* @example\n* var ndarray = require( '@stdlib/ndarray-ctor' );\n* var ndarray2array = require( '@stdlib/ndarray-to-array' );\n* var sliceTo = require( '@stdlib/ndarray-slice-to' );\n*\n* var buffer = [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ];\n* var shape = [ 3, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var x = ndarray( 'generic', buffer, shape, strides, offset, 'row-major' );\n* // returns <ndarray>\n*\n* var sh = x.shape;\n* // returns [ 3, 2 ]\n*\n* var arr = ndarray2array( x );\n* // returns [ [ 1.0, 2.0 ], [ 3.0, 4.0 ], [ 5.0, 6.0 ] ]\n*\n* var y = sliceTo( x, 2, null );\n* // returns <ndarray>\n*\n* sh = y.shape;\n* // returns [ 2, 2 ]\n*\n* arr = ndarray2array( y );\n* // returns [ [ 1.0, 2.0 ], [ 3.0, 4.0 ] ]\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAgB,QAAS,gCAAiC,EAC1DC,EAAoB,QAAS,qCAAsC,EACnEC,EAAgB,QAAS,gCAAiC,EAC1DC,EAAW,QAAS,0BAA2B,EAAE,YACjDC,EAAY,QAAS,2BAA4B,EAAE,YACnDC,EAAS,QAAS,wBAAyB,EAC3CC,EAAc,QAAS,6BAA8B,EACrDC,EAAa,QAAS,iCAAkC,EACxDC,EAAW,QAAS,uBAAwB,EAC5CC,EAAO,QAAS,+BAAgC,EAChDC,EAAS,QAAS,uBAAwB,EAoB9C,SAASC,EAAgBC,EAAQ,CAChC,MAAO,EACNT,EAAUS,CAAM,GAChBP,EAAQO,CAAM,GACdN,EAAaM,CAAM,EAErB,CAiDA,SAASC,EAASC,EAAGC,EAAO,CAC3B,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EAMJ,GAJAH,EAAO,CACN,OAAU,EACX,EACAD,EAAQ,UAAU,OACb,CAACjB,EAAec,CAAE,EACtB,MAAM,IAAI,UAAWJ,EAAQ,oEAAqEI,CAAE,CAAE,EAEvG,GAAKZ,EAAe,UAAWe,EAAM,CAAE,CAAE,EAAI,CAG5C,GAFAA,GAAS,EACTD,EAAU,UAAWC,CAAM,EACtBV,EAAYS,EAAS,QAAS,EAAI,CACtC,GAAK,CAACZ,EAAWY,EAAQ,MAAO,EAC/B,MAAM,IAAI,UAAWN,EAAQ,+DAAgE,SAAUM,EAAQ,MAAO,CAAE,EAEzHE,EAAK,OAASF,EAAQ,MACvB,CAEA,GADAI,EAAKZ,EAAUM,CAAE,EACZG,IAAU,GAAKG,EAAG,OAAS,EAC/B,MAAM,IAAI,WAAYV,EAAQ,+HAAgIU,EAAG,KAAM,GAAI,EAAG,CAAE,CAAE,CAEpL,CACA,GAAKnB,EAAmBc,CAAK,GAE5B,GADAI,EAAOJ,EACFE,EAAQ,EACZ,MAAM,IAAI,MAAO,yCAA0C,MAI5D,KADAE,EAAO,CAAC,EACFE,EAAI,EAAGA,EAAIJ,EAAOI,IACvBF,EAAK,KAAM,UAAWE,CAAE,CAAE,EAG5B,IAAMA,EAAI,EAAGA,EAAIF,EAAK,OAAQE,IAC7B,GAAKV,EAAgBQ,EAAME,CAAE,CAAE,EAC9B,MAAM,IAAI,UAAWX,EAAQ,oGAAqG,OAAQS,EAAME,CAAE,CAAE,CAAE,CAAE,EAG1J,OAAOZ,EAAMK,EAAGK,EAAMD,EAAK,OAAQ,EAAM,CAC1C,CAKAnB,EAAO,QAAUc,ICtGjB,IAAIS,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_main", "__commonJSMin", "exports", "module", "isndarrayLike", "isArrayLikeObject", "isPlainObject", "isNumber", "isBoolean", "isNull", "isUndefined", "hasOwnProp", "getShape", "base", "format", "isInvalidIndex", "index", "sliceTo", "x", "stop", "options", "nargs", "opts", "args", "sh", "i", "main"]
}
